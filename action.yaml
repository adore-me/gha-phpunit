name: 'AdoreMe Tech PHPUnit Action'
description: 'Run PHPUnit tests (and optionally coverage)'
inputs:
  php-image:
    description: 'The PHP image to use'
    required: true
  reports-dir:
    description: 'Reports base directory'
    required: true
    default: 'build/reports'
  phpunit-report-file-name:
    description: 'PHPUnit report file name'
    required: true
    default: 'phpunit-junit.xml'
  enable-mysql:
    description: 'Enable MySQL'
    required: true
    default: 'false'
  enable-redis:
    description: 'Enable Redis'
    required: true
    default: 'false'
  enable-workers:
    description: 'Enable Workers'
    required: true
    default: 'false'
  workers-conf-path:
    description: 'Workers configuration file path'
    required: true
    default: 'ci/worker-confs/supervisor_dev_test_workers.conf'
  with-coverage:
    description: 'Run coverage'
    required: true
    default: 'true'
  coverage-report-file-name:
    description: 'Coverage report file name'
    required: true
    default: 'coverage-clover.xml'
  run-suites:
    description: 'Run specific suites. Pass suites as a comma separated list, no spaces (e.g. "UnitTests,IntegrationTests")'
    required: true
    default: 'UnitTests'
runs:
  using: 'composite'
  steps:
    - name: 'Start MySql'
      id: start-mysql
      if: ${{ inputs.enable-mysql == 'true' }}
      uses: adore-me/gha-mysql@v0.0.8

    - name: 'Start Redis'
      id: start-redis
      if: ${{ inputs.enable-redis == 'true' }}
      uses: adore-me/gha-redis@v0.0.2

    - name: 'Run PHPUnit'
      id: phpunit
      run: $GITHUB_ACTION_PATH/phpunit.sh
      shell: bash
      env:
        INPUT_PHP_IMAGE: ${{ inputs.php-image }}
        MYSQL_CONTAINER_IP: ${{ steps.start-mysql.outputs.container-ip }}
        REDIS_CONTAINER_IP: ${{ steps.start-redis.outputs.container-ip }}
        INPUT_PHPUNIT_REPORT_PATH: '${{ inputs.reports-dir }}/${{ inputs.phpunit-report-file-name }}'
        INPUT_ENABLE_MYSQL: ${{ inputs.enable-mysql }}
        INPUT_ENABLE_REDIS: ${{ inputs.enable-redis }}
        INPUT_ENABLE_WORKERS: ${{ inputs.enable-workers }}
        INPUT_WORKERS_CONF_PATH: ${{ inputs.workers-conf-path }}
        INPUT_WITH_COVERAGE: ${{ inputs.with-coverage }}
        INPUT_COVERAGE_REPORT_PATH: '${{ inputs.reports-dir }}/${{ inputs.coverage-report-file-name }}'
        INPUT_RUN_SUITES: ${{ inputs.run-suites }}

    - name: 'Notify commiter'
      if: always()
      uses: actions/github-script@v6.3.3
      with:
        script: |
          if (${{ steps.phpunit.outputs.phpunit-error }} == true) {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `@${{ github.event.pull_request.user.login }}<br />âš  PHPUnit has errors.<br /><details><summary>Details</summary>${{ steps.phpunit.outputs.phpunit-error-message }}</details>`
            })
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['phpunit-env-error']
            })
          }

    - name: 'Publish PHPUnit Results'
      uses: EnricoMi/publish-unit-test-result-action@v2.0.0
      with:
        check_name: 'PHPUnit'
        comment_title: 'PHPUnit Results'
        report_individual_runs: true
        junit_files: '${{ inputs.reports-dir }}/${{ inputs.phpunit-report-file-name }}'

    - name: 'Publish Coverage'
      if: ${{ inputs.with-coverage == 'true' }}
      uses: lucassabreu/comment-coverage-clover@v0.5.2
      with:
        file: '${{ inputs.reports-dir }}/${{ inputs.coverage-report-file-name }}'
        dir-prefix: '/var/www'

    - name: 'Save PHPUnit artifacts'
      uses: actions/upload-artifact@master
      with:
        name: phpunit-artifacts
        path: ${{ inputs.reports-dir }}

    - name: 'Stop MySql'
      if: ${{ inputs.enable-mysql == 'true' }}
      shell: bash
      run: |
        docker stop mysql -t 0 || true
        docker rm mysql || true

    - name: 'Stop Redis'
      if: ${{ inputs.enable-redis == 'true' }}
      shell: bash
      run: |
        docker stop redis -t 0 || true
        docker rm redis || true

    - name: 'Stop Nginx'
      if: always()
      shell: bash
      run: |
        docker stop nginx-fpm-alpine -t 0 || true
        docker rm nginx-fpm-alpine || true